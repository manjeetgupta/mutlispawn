package main

import (
	"encoding/xml"
	"time"
)

// AutoGeneratedConfig struct
type AutoGeneratedConfig struct {
	Version              int           `json:"version"`
	Folders              []Folders     `json:"folders"`
	Devices              []Devices     `json:"devices"`
	Gui                  Gui           `json:"gui"`
	Ldap                 Ldap          `json:"ldap"`
	Options              Options       `json:"options"`
	RemoteIgnoredDevices []interface{} `json:"remoteIgnoredDevices"`
	PendingDevices       []interface{} `json:"pendingDevices"`
}

// Devicess struct
type Devicess struct {
	DeviceID     string `json:"deviceID"`
	IntroducedBy string `json:"introducedBy"`
}

// MinDiskFree struct
type MinDiskFree struct {
	Value int    `json:"value"`
	Unit  string `json:"unit"`
}

// Params struct
type Params struct {
}

// Versioning struct
type Versioning struct {
	Type   string `json:"type"`
	Params Params `json:"params"`
}

// Folders struct
type Folders struct {
	ID                      string      `json:"id"`
	Label                   string      `json:"label"`
	FilesystemType          string      `json:"filesystemType"`
	Path                    string      `json:"path"`
	Type                    string      `json:"type"`
	Devices                 []Devicess  `json:"devices"`
	RescanIntervalS         int         `json:"rescanIntervalS"`
	FsWatcherEnabled        bool        `json:"fsWatcherEnabled"`
	FsWatcherDelayS         int         `json:"fsWatcherDelayS"`
	IgnorePerms             bool        `json:"ignorePerms"`
	AutoNormalize           bool        `json:"autoNormalize"`
	MinDiskFree             MinDiskFree `json:"minDiskFree"`
	Versioning              Versioning  `json:"versioning"`
	Copiers                 int         `json:"copiers"`
	PullerMaxPendingKiB     int         `json:"pullerMaxPendingKiB"`
	Hashers                 int         `json:"hashers"`
	Order                   string      `json:"order"`
	IgnoreDelete            bool        `json:"ignoreDelete"`
	ScanProgressIntervalS   int         `json:"scanProgressIntervalS"`
	PullerPauseS            int         `json:"pullerPauseS"`
	MaxConflicts            int         `json:"maxConflicts"`
	DisableSparseFiles      bool        `json:"disableSparseFiles"`
	DisableTempIndexes      bool        `json:"disableTempIndexes"`
	Paused                  bool        `json:"paused"`
	WeakHashThresholdPct    int         `json:"weakHashThresholdPct"`
	MarkerName              string      `json:"markerName"`
	CopyOwnershipFromParent bool        `json:"copyOwnershipFromParent"`
	ModTimeWindowS          int         `json:"modTimeWindowS"`
	MaxConcurrentWrites     int         `json:"maxConcurrentWrites"`
	DisableFsync            bool        `json:"disableFsync"`
	BlockPullOrder          string      `json:"blockPullOrder"`
}

// Devices struct
type Devices struct {
	DeviceID                 string        `json:"deviceID"`
	Name                     string        `json:"name"`
	Addresses                []string      `json:"addresses"`
	Compression              string        `json:"compression"`
	CertName                 string        `json:"certName"`
	Introducer               bool          `json:"introducer"`
	SkipIntroductionRemovals bool          `json:"skipIntroductionRemovals"`
	IntroducedBy             string        `json:"introducedBy"`
	Paused                   bool          `json:"paused"`
	AllowedNetworks          []interface{} `json:"allowedNetworks"`
	AutoAcceptFolders        bool          `json:"autoAcceptFolders"`
	MaxSendKbps              int           `json:"maxSendKbps"`
	MaxRecvKbps              int           `json:"maxRecvKbps"`
	IgnoredFolders           []interface{} `json:"ignoredFolders"`
	PendingFolders           []interface{} `json:"pendingFolders"`
	MaxRequestKiB            int           `json:"maxRequestKiB"`
}

// Gui struct
type Gui struct {
	Enabled                   bool   `json:"enabled"`
	Address                   string `json:"address"`
	UnixSocketPermissions     string `json:"unixSocketPermissions"`
	User                      string `json:"user"`
	Password                  string `json:"password"`
	AuthMode                  string `json:"authMode"`
	UseTLS                    bool   `json:"useTLS"`
	APIKey                    string `json:"apiKey"`
	InsecureAdminAccess       bool   `json:"insecureAdminAccess"`
	Theme                     string `json:"theme"`
	Debugging                 bool   `json:"debugging"`
	InsecureSkipHostcheck     bool   `json:"insecureSkipHostcheck"`
	InsecureAllowFrameLoading bool   `json:"insecureAllowFrameLoading"`
}

// Ldap struct
type Ldap struct {
	Address            string `json:"address"`
	BindDN             string `json:"bindDN"`
	Transport          string `json:"transport"`
	InsecureSkipVerify bool   `json:"insecureSkipVerify"`
	SearchBaseDN       string `json:"searchBaseDN"`
	SearchFilter       string `json:"searchFilter"`
}

// MinHomeDiskFree struct
type MinHomeDiskFree struct {
	Value int    `json:"value"`
	Unit  string `json:"unit"`
}

//Options struct
type Options struct {
	ListenAddresses                     []string        `json:"listenAddresses"`
	GlobalAnnounceServers               []string        `json:"globalAnnounceServers"`
	GlobalAnnounceEnabled               bool            `json:"globalAnnounceEnabled"`
	LocalAnnounceEnabled                bool            `json:"localAnnounceEnabled"`
	LocalAnnouncePort                   int             `json:"localAnnouncePort"`
	LocalAnnounceMCAddr                 string          `json:"localAnnounceMCAddr"`
	MaxSendKbps                         int             `json:"maxSendKbps"`
	MaxRecvKbps                         int             `json:"maxRecvKbps"`
	ReconnectionIntervalS               int             `json:"reconnectionIntervalS"`
	RelaysEnabled                       bool            `json:"relaysEnabled"`
	RelayReconnectIntervalM             int             `json:"relayReconnectIntervalM"`
	StartBrowser                        bool            `json:"startBrowser"`
	NatEnabled                          bool            `json:"natEnabled"`
	NatLeaseMinutes                     int             `json:"natLeaseMinutes"`
	NatRenewalMinutes                   int             `json:"natRenewalMinutes"`
	NatTimeoutSeconds                   int             `json:"natTimeoutSeconds"`
	UrAccepted                          int             `json:"urAccepted"`
	UrSeen                              int             `json:"urSeen"`
	UrUniqueID                          string          `json:"urUniqueId"`
	UrURL                               string          `json:"urURL"`
	UrPostInsecurely                    bool            `json:"urPostInsecurely"`
	UrInitialDelayS                     int             `json:"urInitialDelayS"`
	RestartOnWakeup                     bool            `json:"restartOnWakeup"`
	AutoUpgradeIntervalH                int             `json:"autoUpgradeIntervalH"`
	UpgradeToPreReleases                bool            `json:"upgradeToPreReleases"`
	KeepTemporariesH                    int             `json:"keepTemporariesH"`
	CacheIgnoredFiles                   bool            `json:"cacheIgnoredFiles"`
	ProgressUpdateIntervalS             int             `json:"progressUpdateIntervalS"`
	LimitBandwidthInLan                 bool            `json:"limitBandwidthInLan"`
	MinHomeDiskFree                     MinHomeDiskFree `json:"minHomeDiskFree"`
	ReleasesURL                         string          `json:"releasesURL"`
	AlwaysLocalNets                     []interface{}   `json:"alwaysLocalNets"`
	OverwriteRemoteDeviceNamesOnConnect bool            `json:"overwriteRemoteDeviceNamesOnConnect"`
	TempIndexMinBlocks                  int             `json:"tempIndexMinBlocks"`
	UnackedNotificationIDs              []interface{}   `json:"unackedNotificationIDs"`
	TrafficClass                        int             `json:"trafficClass"`
	DefaultFolderPath                   string          `json:"defaultFolderPath"`
	SetLowPriority                      bool            `json:"setLowPriority"`
	MaxFolderConcurrency                int             `json:"maxFolderConcurrency"`
	CrURL                               string          `json:"crURL"`
	CrashReportingEnabled               bool            `json:"crashReportingEnabled"`
	StunKeepaliveStartS                 int             `json:"stunKeepaliveStartS"`
	StunKeepaliveMinS                   int             `json:"stunKeepaliveMinS"`
	StunServers                         []string        `json:"stunServers"`
	DatabaseTuning                      string          `json:"databaseTuning"`
	MaxConcurrentIncomingRequestKiB     int             `json:"maxConcurrentIncomingRequestKiB"`
}

//--------------------------------------------------------------------------------
//Connections struct
type connections struct {
	Address       string    `json:"address"`
	At            time.Time `json:"at"`
	ClientVersion string    `json:"clientVersion"`
	Connected     bool      `json:"connected"`
	Crypto        string    `json:"crypto"`
	InBytesTotal  int       `json:"inBytesTotal"`
	OutBytesTotal int       `json:"outBytesTotal"`
	Paused        bool      `json:"paused"`
	Type          string    `json:"type"`
}

//---------------------------------------------------------------------------------
type nodeData struct {
	HardwareID       string //Device name
	GloabalID        int
	Address          string
	ConnectionStatus int
	//ReconnectFlag    bool
}

// A EventConnect Struct
type EventConnect []struct {
	SubscriptionID int                `json:"id"`
	GlobalID       int                `json:"globalID"`
	Time           time.Time          `json:"time"`
	Type           string             `json:"type"`
	Data           DataDetailsConnect `json:"data"`
}

// A DataDetailsConnect Struct
type DataDetailsConnect struct {
	Addr          string `json:"addr"`
	ClientName    string `json:"clientName"`
	ClientVersion string `json:"clientVersion"`
	DeviceName    string `json:"deviceName"`
	ID            string `json:"id"`
	Type          string `json:"type"`
}

// A EventDisconnect Struct
type EventDisconnect []struct {
	SubscriptionID int                   `json:"id"`
	GlobalID       int                   `json:"globalID"`
	Time           time.Time             `json:"time"`
	Type           string                `json:"type"`
	Data           DataDetailsDisconnect `json:"data"`
}

// A DataDetailsDisconnect Struct
type DataDetailsDisconnect struct {
	Error string `json:"error"`
	ID    string `json:"id"`
}

// A Event Struct
type Event []struct {
	SubscriptionID int         `json:"id"`
	GlobalID       int         `json:"globalID"`
	Time           time.Time   `json:"time"`
	Type           string      `json:"type"`
	Data           DataDetails `json:"data"`
}

// A DataDetails Struct
type DataDetails struct {
	Action     string `json:"action"`
	Folder     string `json:"folder"`
	FolderID   string `json:"folderID"`
	Label      string `json:"label"`
	ModifiedBy string `json:"modifiedBy"`
	Path       string `json:"path"`
	Type       string `json:"type"`
}

type appDetailruntime struct {
	CsciName        string
	ListOfArguments string
	Redundant       bool
}

type pidState struct {
	Pid   int `json:"pid"`
	State int `json:"state"`
	//Struct fields must start with upper case letter (exported) for the JSON package to see their value.
}

//------------------------Deployment map related structures----------------------
type appList struct {
	XMLName xml.Name    `xml:"appList"`
	App     []appDetail `xml:"appDetail"`
}

type appDetail struct {
	XMLName         xml.Name `xml:"appDetail"`
	CsciName        string   `xml:"csci_name"`
	AirbaseID       int      `xml:"airbase_id"`
	HardwareID      string   `xml:"hardware_id"`
	HardwareType    string   `xml:"hardware_type"`
	CsciID          int      `xml:"csci_id"`
	MaxRetries      int      `xml:"max_retries"`
	Redundant       bool     `xml:"redundant"`
	ListOfArguments string   `xml:"list_of_arguments"`
}
